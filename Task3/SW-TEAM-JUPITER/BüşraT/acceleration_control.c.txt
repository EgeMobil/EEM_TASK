#include "acceleration_control_public.h"
#include "acceleration_control_private.h"
#include "definition.h"
#include <stdio.h>

static float throttle = 0.0f; // Stores the current throttle value

// Main function for testing acceleration control
int main() {
    Acceleration_setThrottle(0.8f); // Set throttle to 80%
    printf("Current Throttle: %f\n", Acceleration_getThrottle()); // Print current throttle value
    return 0;
}

// Sets the throttle value, ensuring it stays within valid limits
void Acceleration_setThrottle(float value) {
    if (value > 1.0f) value = 1.0f; // Limit the maximum throttle to 1.0
    if (value < 0.0f) value = 0.0f; // Ensure throttle is not negative
    processGasPedalInput(value); // Process the gas pedal input
    throttle = value; // Update the throttle value
}

// Returns the current throttle value
float Acceleration_getThrottle() {
    return throttle;
}

// Limits the engine power to the predefined safety threshold
void Acceleration_limitPower() {
    if (enginePower > SAFETY_THRESHOLD) {
        enginePower = SAFETY_THRESHOLD;
    }
}

// Processes the gas pedal input and updates internal values
static void processGasPedalInput(float pedalValue) {
    gasPedalSignal = pedalValue; // Store the gas pedal signal
    calculateEnginePower(); // Calculate engine power based on input
}

// Calculates the engine power based on the gas pedal signal
static void calculateEnginePower() {
    enginePower = gasPedalSignal * MAX_ACCELERATION; // Compute power
    Acceleration_limitPower(); // Apply safety limitations if needed
}
